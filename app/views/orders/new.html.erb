<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA5LrPhIokuSBO5EgKEcfu859gog6fRF8w&libraries=places&callback=initAutocomplete"
         async defer></script>
<%= form_for(@order, url: '/orders') do |f| %>
 
<%= f.hidden_field :pickup_location_latitude, :value => "" %>
<%= f.hidden_field :pickup_location_longitude, :value => "" %>

<%= f.hidden_field :delivery_location_latitude, :value => "" %>
<%= f.hidden_field :delivery_location_longitude, :value => "" %>


<div class="container">
  <div class="row">
    <div class="col-sm-3"></div>
    <div class="col-sm-6">
        <center>
            <h2 id="delivery_request_page_heading">Place Delivery Request</h2>
        </center>
    </div>
    <div class="col-sm-3"></div>
  </div>


  <div class="row" id="basic_details">
    <div class="col-sm-3"></div>
    <div class="col-sm-6">
    	<div class="form-group">
            <div>
            	<label class="request_label">
            		Requesting for self?
            	</label>

            	<label class="switch">
				  <input type="checkbox" id="for_self" checked>
				  <span class="slider round"></span>
				</label>
            </div>
        </div>


    	<div class="form-group">
            <div>
                <%= f.text_field :customer_name, value: @user_name, autocomplete: "off", class: "form-control", placeholder: "Customer name" %>
            </div>
        </div>

        <div class="form-group">
            <div>
                <%= f.text_area :pickup_address, autocomplete: "off", class: "form-control", placeholder: "Your pickup address"%>
                <input type="text" name="search_pickup_address" id="pickup_search" class="form-control" placeholder="Type your pickup address here..." >
            </div>
            <small>Start typing your pickup address here or simply move the marker over the map below.</small>
        </div>

        <div class="form-group">
            <div id="map_canvas_pickup" style="width: auto; height: 250px;" class="map_location"></div>
        </div>

        <div class="form-group">
            <div class="row">
            	<div class="col-sm-6">
                	<%= f.text_field :pickup_date,  autocomplete: "off",  class: "form-control", "data-provide" => 'datepicker', placeholder: "Pickup date" %>
                </div>

                <div class="col-sm-6">
                	<%= f.text_field :pickup_time, class: "form-control timepicker", placeholder: "Pickup time" %>
                </div>
            </div>
        </div>


        <div class="form-group">
            <div>
                <%= f.text_area :delivery_address, autocomplete: "off", class: "form-control", placeholder: "Your delivery address" %>
                <input type="text" name="search_delivery_address" id="delivery_search" class="form-control" placeholder="Type your delivery address here..." >
            </div>
            <small>Start typing your delivery address here or simply move the marker over the map below.</small>
        </div>


        <div class="form-group">
            <div id="map_canvas_delivery" style="width: auto; height: 250px;" class="map_location"></div>
        </div>


        <div class="form-group">
            <div>
            	<label class="request_label">
            		Scheduled Delivery?
            	</label>

            	<label class="switch">
				  <input type="checkbox" id="for_scheduled_delivery">
				  <span class="slider round"></span>
				</label>
            </div>
        </div>

        <div class="form-group" id="scheduled_delivery_section">
            <div class="row">
            	<div class="col-sm-6">
                	<%= f.text_field :delivery_date, autocomplete: "off", class: "form-control", "data-provide" => 'datepicker', placeholder: "Delivery date" %>
                </div>

                <div class="col-sm-6">
                	<%= f.text_field :delivery_time, autocomplete: "off", class: "form-control timepicker", placeholder: "Delivery time" %>
                </div>
            </div>
        </div>

        <hr>
        <div class="form-group order-item-holder">
        	<h4>Add order items</h4>
            <div class="row order-item-row">
            	<div class="col-sm-5">
                	<input type="text" name="order_item_names[]" class="form-control item-name", placeholder="Item name">
                </div>

                <div class="col-sm-5">
                	<input type="text" name="order_item_weights[]" class="form-control item-weight", placeholder="Approximate weight">
                </div>

                <div class="col-sm-1">
                	<span class="glyphicon glyphicon-plus"></span>
                </div>

                <div class="col-sm-1">
                	<span class="glyphicon glyphicon-minus"></span>
                </div>
            </div>
        </div>

        <hr>
        <div class="form-group">
            <div>
                <button type="button" class="btn btn-success" id="place_request_button">Place request</button>
                <%= link_to "Cancel", list_blogs_home_index_path, class: "btn btn-primary", :method => "get" %>
            </div>
        </div>
    </div>
    <div class="col-sm-3"></div>
  </div>



   <div class="row" id="order_summary">
    <div class="col-sm-3"></div>
    <div class="col-sm-6">
    	<div class="form-group">
            <b>Order placed by - </b><b class="normal" id="placed_by"></b><br><br>
            <b>Pickup address -</b><b class="normal" id="pickup_address"></b><br><br>
            <b>Pickup date -</b><b class="normal" id="pickup_date"></b><br><br>
            <b>Pickup time -</b><b class="normal" id="pickup_time"></b><br><br>
            <b>Delivery Address -</b><b class="normal" id="delivery_address"></b><br><br>
        </div>

        <div class="form-group">
           <table id="order_summary_table" class="table table-bordered">
			<thead>
				<tr>
					<th class="col-md-3">Item</th>
					<th class="col-md-6">Weight</th>
					<th class="col-md-6">Cost</th>
				</tr>
			</thead>
			<tbody id="order_item_tbody">
				
			</tbody>
            <tfoot id="order_item_tfoot">
                <tr>
                    <td colspan="3"><span id="payable_span" class="payable-span"><b>Net payable - </b></span></td>
                </tr>
            </tfoot>
		</table>
        </div>

         <div class="form-group">
            <div>
                <button type="button" class="btn btn-success" id="make_payment_button">Make payment</button>
                <%= link_to "Cancel", list_blogs_home_index_path, class: "btn btn-primary", :method => "get" %>
                <button type="button" class="btn btn-warning" id="back_button">Back</button>
            </div>
        </div>
    </div>
    <div class="col-sm-3"></div>
  </div>



  <div class="row" id="payment_section">
    <div class="col-sm-3"></div>
    <div class="col-sm-6">
        <div class="form-group">
            <div class="inputGroup">
                <input id="pop_radio" name="pop_radio" type="radio"/>
                <label for="pop_radio">Pay on pickup</label>
            </div>
            <div class="inputGroup">
                <input id="online_payment_radio" name="online_payment_radio" type="radio"/>
                <label for="online_payment_radio">Online payment</label>
            </div>
        </div>

        <div class="form-group" id="pop">
            <div class="pop-message">
                <small>Please pay <b id="pop_money_value"></b> to our executive during the time of parcel pickup.</small>
            </div>
        </div>

        <div class="form-group" id="online_payment">
           <div class="op-message">
                <small>Online payment option is not available as of now.</small>
            </div>
        </div>



         <div class="form-group">
            <div>
                <button type="button" class="btn btn-success" id="order_submit_button">Place request</button>
                <%= link_to "Cancel", list_blogs_home_index_path, class: "btn btn-primary", id: "order_cancel_button", :method => "get" %>
            </div>
        </div>
    </div>
    <div class="col-sm-3"></div>
  </div>


   <div class="row" id="payment_details">
    <div class="col-sm-3"></div>
    <div class="col-sm-6">
    	
    </div>
    <div class="col-sm-3"></div>
  </div>
</div>
<%= hidden_field_tag 'order_value', ''%>
<% end %>



<script>
$("#order_pickup_address").prop("readonly",true);
$("#order_delivery_address").prop("readonly",true);
$('#order_customer_name').prop("readonly",true);
// New map code ==============================================================================

  function initAutocomplete() 
  {
    var pickup_map = new google.maps.Map(document.getElementById('map_canvas_pickup'), {
      center: {lat: -33.8688, lng: 151.2195},
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
    });

    var delivery_map = new google.maps.Map(document.getElementById('map_canvas_delivery'), {
      center: {lat: -33.8688, lng: 151.2195},
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
    });


    // Create the search box and link it to the UI element.
    var input_pickup = document.getElementById('pickup_search');
    var searchBox = new google.maps.places.SearchBox(input_pickup);
    pickup_map.controls[google.maps.ControlPosition.TOP_LEFT].push(input_pickup);

    var input_delivery = document.getElementById('delivery_search');
    var searchBox_delivery = new google.maps.places.SearchBox(input_delivery);
    delivery_map.controls[google.maps.ControlPosition.TOP_LEFT].push(input_delivery);

    // Bias the SearchBox results towards current map's viewport.
    pickup_map.addListener('bounds_changed', function() {
      searchBox.setBounds(pickup_map.getBounds());
    });

    delivery_map.addListener('bounds_changed', function() {
      searchBox_delivery.setBounds(delivery_map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Placing the selected address into the address box
      $("#order_pickup_address").val($("#pickup_search").val());
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode( { 'address': $("#pickup_search").val()}, function(results, status) 
      {
        if (status == google.maps.GeocoderStatus.OK) 
        {
            $("#order_pickup_location_latitude").val(results[0].geometry.location.lat());
            $("#order_pickup_location_longitude").val(results[0].geometry.location.lng());
        }
      });

      

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: pickup_map,
          draggable: true,
          title: place.name,
          position: place.geometry.location
        }));

        last_marker = markers[markers.length-1];
        google.maps.event.addListener(last_marker, 'dragend', function (event) 
        {         
            var latlng = {lat: event.latLng.lat(), lng: event.latLng.lng()};
            var geocoder = new google.maps.Geocoder;
            geocoder.geocode({'location': latlng}, function(results, status) {
              if (status === 'OK') {
                if (results[0]) 
                {
                  $("#order_pickup_address").val(results[0].formatted_address);
                  $("#pickup_search").val(results[0].formatted_address);
                  $("#order_pickup_location_latitude").val(event.latLng.lat());
                  $("#order_pickup_location_longitude").val(event.latLng.lng());
                } 
                else 
                {
                  window.alert('No results found');
                }
              } 
              else 
              {
                window.alert('Geocoder failed due to: ' + status);
              }
            });
        });


        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      pickup_map.fitBounds(bounds);
    });

////////////////////////////////////////////////////////////////////////////
    var markers_delivery = [];
    searchBox_delivery.addListener('places_changed', function() {
      var places = searchBox_delivery.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Placing the selected address into the address box
      $("#order_delivery_address").val($("#delivery_search").val());
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode( { 'address': $("#delivery_search").val()}, function(results, status) 
      {
        if (status == google.maps.GeocoderStatus.OK) 
        {
            $("#order_delivery_location_latitude").val(results[0].geometry.location.lat());
            $("#order_delivery_location_longitude").val(results[0].geometry.location.lng());
        }
      });


      // Clear out the old markers.
      markers_delivery.forEach(function(marker) {
        marker.setMap(null);
      });
      markers_delivery = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers_delivery.push(new google.maps.Marker({
          map: delivery_map,
          draggable: true,
          title: place.name,
          position: place.geometry.location
        }));

        last_marker = markers_delivery[markers_delivery.length-1];
        google.maps.event.addListener(last_marker, 'dragend', function (event) 
        {         
            var latlng = {lat: event.latLng.lat(), lng: event.latLng.lng()};
            var geocoder = new google.maps.Geocoder;
            geocoder.geocode({'location': latlng}, function(results, status) {
              if (status === 'OK') {
                if (results[0]) 
                {
                  $("#order_delivery_address").val(results[0].formatted_address);
                  $("#delivery_search").val(results[0].formatted_address);
                  $("#order_delivery_location_latitude").val(event.latLng.lat());
                  $("#order_delivery_location_longitude").val(event.latLng.lng());
                } 
                else 
                {
                  window.alert('No results found');
                }
              } 
              else 
              {
                window.alert('Geocoder failed due to: ' + status);
              }
            });
        });


        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      delivery_map.fitBounds(bounds);
    });
  }



$('.timepicker').timepicker();
$("#scheduled_delivery_section").hide();

$("#basic_details").show();
$("#order_summary").hide();
$("#payment_section").hide();

$( ".glyphicon-plus" ).on( "click", function() {
	$(".order-item-holder").append($(this).closest('.order-item-row').clone(true,true));

	//clearing all the data of the cloned object
	$(".order-item-row").last().each(function() {
	  $(this).find('.item-name').val("");
	  $(this).find('.item-weight').val("");
	});	
});

$( ".glyphicon-minus" ).on( "click", function() {
	if( $('.order-item-row').length == 1)
	{
	    $.notify("Please add atleast one item details"); 
	}
	else
	{
		$(this).closest('.order-item-row').remove();
	}
});


$( "#for_self" ).on( "click", function() {
	if($(this).is(':checked'))
	{
		$('#order_customer_name').val(gon.user_name);
        $('#order_customer_name').prop("readonly",true);
	}
	else
	{
		$('#order_customer_name').val("");
        $('#order_customer_name').prop("readonly",false);
	}
});

$( "#for_scheduled_delivery" ).on( "click", function() {
	if($(this).is(':checked'))
	{
		$("#scheduled_delivery_section").show();
		$("#order_delivery_date").val("");
		$("#order_delivery_time").val("");
	}
	else
	{
		$("#scheduled_delivery_section").hide();
	}
});

$( "#place_request_button" ).on( "click", function() {

	// All JS checking will happen here--------------------------

    var all_item_names = [];
    var all_item_weights = [];
    var result_cost_array = [];
    var sum = 0;

	$("#basic_details").hide();
	$("#order_summary").show();
    $("#payment_section").hide();

	$("#placed_by").html($("#order_customer_name").val());
	$("#pickup_address").html($("#order_pickup_address").val());
	$("#pickup_date").html($("#order_pickup_date").val());
	$("#pickup_time").html($("#order_pickup_time").val());
	$("#delivery_address").html($("#order_delivery_address").val());

	$("#delivery_request_page_heading").html("Order summary");


    $( ".item-name" ).each(function( index ) {
        all_item_names.push($(this).val());
    });

    $( ".item-weight" ).each(function( index ) {
        all_item_weights.push($(this).val());
    });

    // Calculate costs on the basis of provided weights----------
    $.ajax({
        url: "/orders/calculate_cost", 
        type: "POST",
        data: { weight: all_item_weights},
        success: function(result){
            temp_result = JSON.stringify(result);
            result_array = temp_result.replace('[',"").replace(']',"").replace(/^"(.*)"$/, '$1').split(',');

            for(i=0; i<result_array.length; i++)
            {
                sum = sum + parseFloat(result_array[i]);
                result_cost_array.push(result_array[i]);
            }
            $( ".item-name" ).each(function( index ) {
                main_tr = document.createElement("tr");
              
                item_name_td =  document.createElement("td");
                item_name_td.innerHTML = $(this).val();
                main_tr.appendChild(item_name_td);
              
                item_weight_td =  document.createElement("td");
                item_weight_td.innerHTML = all_item_weights[index];
                main_tr.appendChild(item_weight_td);


                cost_td =  document.createElement("td");
                cost_td.innerHTML = result_cost_array[index];
                cost_td.className = "right-aligned-td";
                main_tr.appendChild(cost_td);

                $("#order_summary_table").append(main_tr);
                $("#payable_span").html("<b>Net payable - "+sum+"</b>");
            });

        }
    });
    
});


$( "#back_button" ).on( "click", function() {   
    $("#basic_details").show();
    $("#order_summary").hide();
    $("#order_summary_table > tbody").empty();
});


$( "#make_payment_button" ).on( "click", function() {
    // All JS checking will happen here--------------------------

    $("#basic_details").hide();
    $("#order_summary").hide();
    $("#payment_section").show();
    $("#delivery_request_page_heading").html("Payment");
    $("#pop").hide();
    $("#online_payment").hide();

    $("#order_submit_button").hide();
    $("#order_cancel_button").hide();

});

$("input[name='pop_radio']").change(function(){
    if($(this).prop('checked'))
    {
        $("input[name='online_payment_radio']").prop('checked',false);
        $("#pop").show();
        $("#online_payment").hide();

        var payable_amount = $("#payable_span").html().replace("Net payable - ","");
        $("#pop_money_value").html("<b>INR </b>"+payable_amount);
        $("#order_submit_button").show();
        $("#order_cancel_button").show();
    }
    
});

$("input[name='online_payment_radio']").change(function(){
    if($(this).prop('checked'))
    {
        $("input[name='pop_radio']").prop('checked',false);
        $("#pop").hide();
        $("#online_payment").show();
        $("#order_submit_button").hide();
        $("#order_cancel_button").hide();
    }
    
});

$( "#order_submit_button" ).on( "click", function() {
    // All JS checking will happen here--------------------------
    var order_value = $("#payable_span").html().replace("Net payable - ","").replace("<b>","").replace("</b>","");
    $("#order_value").val(order_value);
    $('form').submit();

});

</script>

<style>
	.order-item-row
	{
		padding-bottom: 17px;
	}
    .normal
    {
        font-weight: normal;
    }
    .payable-span
    {
        float: right;
    }
    .right-aligned-td
    {
        text-align: right;
    }
    .pop-message
    {
        height: 47px;
        background-color: #ccffcc;
        border-radius: 6px;
        border: 2px solid #1f7a1f;
        text-align: center;
        padding: 10px;
    }
    .op-message
    {
        height: 47px;
        background-color: #ffcccc;
        border-radius: 6px;
        border: 2px solid #800000;
        text-align: center;
        padding: 10px;
    }
    .pop-message small
    {
        font-size: 97%;
        color: #1f7a1f;
    }

    .op-message small
    {
        font-size: 97%;
        color: #800000;
    }
    #pickup_search
    {
        z-index: 1 !important;
        position: absolute !important;
        left: 52px !important;
        top: 10px !important;
        width: 80% !important;
        border-radius: 3px;
    }
    #delivery_search
    {
        z-index: 1 !important;
        position: absolute !important;
        left: 52px !important;
        top: 10px !important;
        width: 80% !important;
        border-radius: 3px;
    }
</style>